/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.app;

import java.awt.BorderLayout;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Jacky
 */
public class AddNewQuestionsPanel extends javax.swing.JPanel {

    int type;
    Admin adminFrame;
    Connection con;
    Statement s;
    ResultSet rs;
    int maxQuestions;
   // Type1AddingQuestionsPanel type1;
   // Type2AddingQuestionsPanel type2;
   // Type3AddingQuestionsPanel type3;
    String subjectName;
    int standard;
    boolean flag;

    /**
     * Creates new form AddNewQuestionsPanel
     */
    AddNewQuestionsPanel(Admin adminFrame, String subjectName, String standard) {
        initComponents();
        this.adminFrame = adminFrame;
        this.subjectName = subjectName;
        this.standard = standard.equals("IX") ? 9 : 10;
        try {
            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        try {
            con = DriverManager.getConnection("jdbc:odbc:ProjectDatabase");
            s = con.createStatement();

            s.execute("select max(QuestionId) from Questions");
            rs = s.getResultSet();
            if (rs != null) {
                while (rs.next()) {
                    maxQuestions = rs.getInt(1);
                }
            }
            enterQuestionNumberLabel.setText(Integer.toString(++maxQuestions));
            questionTypeComboBox.setSelectedIndex(0);
         //   questionPanel.add(type1 = new Type1AddingQuestionsPanel(), BorderLayout.CENTER);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        questionTypeComboBox = new javax.swing.JComboBox();
        questionTypeLabel = new javax.swing.JLabel();
        questionNoLabel = new javax.swing.JLabel();
        enterQuestionNumberLabel = new javax.swing.JLabel();
        questionLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        questionTextArea = new javax.swing.JTextArea();
        questionPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        topicLabel = new javax.swing.JLabel();
        topicTextField = new javax.swing.JTextField();

        questionTypeComboBox.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 14)); // NOI18N
        questionTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Multiple Choice Questions", "True or False", "Blanks" }));
        questionTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                questionTypeComboBoxActionPerformed(evt);
            }
        });

        questionTypeLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 16)); // NOI18N
        questionTypeLabel.setText("Question Type");

        questionNoLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 16)); // NOI18N
        questionNoLabel.setText("Question No");

        enterQuestionNumberLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 16)); // NOI18N

        questionLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 16)); // NOI18N
        questionLabel.setText("Question");

        questionTextArea.setColumns(20);
        questionTextArea.setRows(5);
        jScrollPane1.setViewportView(questionTextArea);

        questionPanel.setLayout(new java.awt.BorderLayout());

        saveButton.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        saveButton.setText("SAVE");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        clearButton.setText("CLEAR");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        cancelButton.setText("CANCEL");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        topicLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 16)); // NOI18N
        topicLabel.setText("Topic");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(questionNoLabel)
                                    .addComponent(questionLabel))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(enterQuestionNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(questionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(questionTypeLabel)
                            .addComponent(topicLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(questionTypeComboBox, 0, 217, Short.MAX_VALUE)
                            .addComponent(topicTextField))))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(questionTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(questionTypeLabel))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(topicLabel)
                    .addComponent(topicTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(questionNoLabel)
                    .addComponent(enterQuestionNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(questionLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(questionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void questionTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionTypeComboBoxActionPerformed
        type = questionTypeComboBox.getSelectedIndex();

        if (type == 0) {
            topicTextField.setText("");
            questionTextArea.setText("");
            questionPanel.removeAll();
        //    questionPanel.add(type1 = new Type1AddingQuestionsPanel(), BorderLayout.CENTER);
        } else if (type == 1) {
            topicTextField.setText("");
            questionTextArea.setText("");
            questionPanel.removeAll();
       //     questionPanel.add(type2 = new Type2AddingQuestionsPanel(), BorderLayout.CENTER);
        } else if (type == 2) {
            topicTextField.setText("");
            questionTextArea.setText("");
            questionPanel.removeAll();
        //    questionPanel.add(type3 = new Type3AddingQuestionsPanel(), BorderLayout.CENTER);
        }

        adminFrame.getRootPane().updateUI();
        SwingUtilities.updateComponentTreeUI(this);
    }//GEN-LAST:event_questionTypeComboBoxActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed

        questionTypeComboBox.setSelectedIndex(type);
        if (type == 0) {
            questionPanel.removeAll();
          //  questionPanel.add(type1 = new Type1AddingQuestionsPanel(), BorderLayout.CENTER);
        } else if (type == 1) {
            questionPanel.removeAll();
           // questionPanel.add(type2 = new Type2AddingQuestionsPanel(), BorderLayout.CENTER);
        } else if (type == 2) {
            questionPanel.removeAll();
           // questionPanel.add(type3 = new Type3AddingQuestionsPanel(), BorderLayout.CENTER);
        }
        questionTextArea.setText("");
        topicTextField.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        flag = false;
        checkTopic();
        if (!flag) {
            return;
        }
        checkQuestion();
        if (!flag) {
            return;
        }

        if (type == 0) {
           // checkType1Options();
            if (!flag) {
                return;
            }
        }

        if (type == 2) {
         //   checkType3Options();
            if (!flag) {
                return;
            }
        }

  //      checkSelected();
        if (!flag) {
            return;
        }
        try {
            s.execute("select max(QuestionId) from Questions");
            rs = s.getResultSet();
            if (rs != null) {
                while (rs.next()) {
                    maxQuestions = rs.getInt(1);
                }
            }
            enterQuestionNumberLabel.setText(Integer.toString(++maxQuestions));
            adminFrame.getRootPane().updateUI();
            if (type == 0) {
                PreparedStatement ps = con.prepareStatement("insert into Questions values(?,?,?,?,?,?,?,?,?,?,?)");
                ps.setInt(1, maxQuestions);
                ps.setString(2, subjectName);
                ps.setString(3, topicTextField.getText());
                ps.setInt(4, standard);
                ps.setInt(5, (type + 1));
                ps.setString(6, questionTextArea.getText());
            //    ps.setString(7, type1.type1option1.getText());
             //   ps.setString(8, type1.type1option2.getText());
             //   ps.setString(9, type1.type1option3.getText());
             //   ps.setString(10, type1.type1option4.getText());
             //   ps.setString(11, type1.correctAnswer);
                ps.executeUpdate();
            } else if (type == 1) {
                PreparedStatement ps = con.prepareStatement("insert into Questions values(?,?,?,?,?,?,?,?,?,?,?)");
                ps.setInt(1, maxQuestions);
                ps.setString(2, subjectName);
                ps.setString(3, topicTextField.getText());
                ps.setInt(4, standard);
                ps.setInt(5, (type + 1));
             //   ps.setString(6, questionTextArea.getText());
             //   ps.setString(7, type2.type2option1.getText());
              //  ps.setString(8, type2.type2option2.getText());
                ps.setString(9, null);
                ps.setString(10, null);
             //   ps.setString(11, type2.correctAnswer);
                ps.executeUpdate();
            } else if (type == 2) {
                PreparedStatement ps = con.prepareStatement("insert into Questions values(?,?,?,?,?,?,?,?,?,?,?)");
                ps.setInt(1, maxQuestions);
                ps.setString(2, subjectName);
                ps.setString(3, topicTextField.getText());
                ps.setInt(4, standard);
                ps.setInt(5, (type + 1));
                ps.setString(6, questionTextArea.getText());
          //      ps.setString(7, type3.type3option1.getText());
          //      ps.setString(8, type3.type3option2.getText());
          //      ps.setString(9, type3.type3option3.getText());
          //      ps.setString(10, null);
         //       ps.setString(11, type3.correctAnswer);
                ps.executeUpdate();
            }
            clearButtonActionPerformed(evt);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_saveButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel enterQuestionNumberLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JLabel questionNoLabel;
    private javax.swing.JPanel questionPanel;
    private javax.swing.JTextArea questionTextArea;
    private javax.swing.JComboBox questionTypeComboBox;
    private javax.swing.JLabel questionTypeLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel topicLabel;
    private javax.swing.JTextField topicTextField;
    // End of variables declaration//GEN-END:variables

    private void checkTopic() {
        if (topicTextField.getText().equals("")) {
            flag = false;
            JOptionPane.showMessageDialog(adminFrame, "Enter a Topic");
            return;
        }
        flag = true;
    }

    private void checkQuestion() {
        if (questionTextArea.getText().equals("")) {
            flag = false;
            JOptionPane.showMessageDialog(adminFrame, "Enter a Question");
            return;
        }
        flag = true;
    }
}
  //  private void checkType1Options() {
     //   if (type1.type1option1.getText().equals("")) {
       //     flag = false;
      //      JOptionPane.showMessageDialog(adminFrame, "Enter all options");
         //   return;
      //  } else if (type1.type1option2.getText().equals("")) {
      //      flag = false;
       //     JOptionPane.showMessageDialog(adminFrame, "Enter all options");
        //    return;
      //  } else if (type1.type1option3.getText().equals("")) {
       //     flag = false;
        //    JOptionPane.showMessageDialog(adminFrame, "Enter all options");
       //     return;
      //  } else if (type1.type1option4.getText().equals("")) {
        //    flag = false;
        //    JOptionPane.showMessageDialog(adminFrame, "Enter all options");
        //    return;
      //  }
      //  flag = true;
    //}

 /*private void checkType3Options() {
        if (type3.type3option1.getText().equals("")) {
            flag = false;
            JOptionPane.showMessageDialog(adminFrame, "Enter all options");
            return;
        } else if (type3.type3option2.getText().equals("")) {
            flag = false;
            JOptionPane.showMessageDialog(adminFrame, "Enter all options");
            return;
        } else if (type3.type3option3.getText().equals("")) {
            flag = false;
            JOptionPane.showMessageDialog(adminFrame, "Enter all options");
            return;
        }
        flag = true;
    }

    private void checkSelected() {
        if (type == 0) {
            if (!(type1.type1Option1RadioButton.isSelected() || type1.type1Option2RadioButton.isSelected() || type1.type1Option3RadioButton.isSelected() || type1.type1Option4RadioButton.isSelected())) {
                flag = false;
                JOptionPane.showMessageDialog(adminFrame, "Select an option");
                return;
            }
            flag = true;
        }
        if (type == 1) {
            if (!(type2.type2Option1RadioButton.isSelected() || type2.type2Option2RadioButton.isSelected())) {
                flag = false;
                JOptionPane.showMessageDialog(adminFrame, "Select an option");
                return;
            }
            flag = true;
        }
        flag = true;
        if (type == 2) {
            if (!(type3.type3Option1RadioButton.isSelected() || type3.type3Option2RadioButton.isSelected() || type3.type3Option3RadioButton.isSelected())) {
                flag = false;
                JOptionPane.showMessageDialog(adminFrame, "Select an option");
                return;
            }
            flag = true;
        }

    }
}*/